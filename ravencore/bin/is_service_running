#!/bin/bash
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

# This script tries to determine if a service is running. It works just fine
# on most systems, but still has trouble on some distributions which do not
# set correct or expected exit codes when they run.

# we don't need our database conf

GOT_CONF=1

. /etc/ravencore.conf || exit 1

service=$1

# check to see if the init script exists

if [ ! -f $INITD/$service ]; then

    $_echo "no init script for $service"

    exit 1

fi

# send the "status" option to the init script, and force any error'd output to stdout
status_output=$($INITD/$1 status 2> /dev/stdout)

# save the exit status of the init script

ret=$?

# check to see if the init script said we're "stopped" or some variation of "not running"
# this must be done before our "status" check

is_stopped=$($_echo $status_output | grep '[stopped||not.*running]')

# check to make sure the status command was recognized

case $($_echo $status_output | $_grep "Usage: ") in
# we're OK
    "") ;;
# we can't do a "status" on this init script. set $is_stopped to bypass our "Yes", our
# pidof check should see it running if it really is
    *) is_stopped="stopped"
	;;
esac

# exit status of 0 means running OK ( if the $is_stopped is blank ). Some systems fail to
# set correct exit codes with init scripts, and this is a measure to try to hack around that

if [ $ret -eq 0 ] && [ -z "$is_stopped" ]; then
  
    $_echo Yes

    exit 0
  
else

# try it again with a pidof... just in case this system doesn't support the "status" command
# for init scripts

# first, map service names to their pid name, b/c some are different
    
    [ -f $RC_ROOT/etc/pname.$service ] && service=$($_cat $RC_ROOT/etc/pname.$service)
    
# leave $service in quotes here, so the () characters in "amavisd (master)" doesn't fudge up the command

    $_pidof "$service" &> /dev/null

    if [ $? -eq 0 ]; then

	$_echo Yes

	exit 0
	
    else

	$_echo No

	exit 1

    fi

fi
