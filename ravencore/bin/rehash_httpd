#!/bin/bash
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#
# Rehash the httpd Configuration File
#

# Grab the configuration file

. /etc/ravencore.conf || exit 1

# check to make sure that this server is a webserver

if [ ! -x $RC_ROOT/conf.d/web.conf ]; then

    $_echo "Not a webserver, exiting"
    exit 1

fi

# This script's usage output

usage() {

    $_echo "Usage: rehash_httpd [options] domain_list"
    $_echo -e "\t--all      Rebuild httpd.include for all domains on the server"
    $_echo -e "\t--restart  Do a full restart of apache instead of just a reload"
    $_echo -e "\t-v         Be verbose"
    $_echo -e "\n\t           domain_list is one or more domains, seperated by spaces"

    exit 1

}

# We must have atleast one argument to run

if [ $# -eq 0 ]; then

    usage

fi

while [ "$1" ]; do

    case $1 in
# Run mysql query to get a list of all domains with physical hosting
	"--all") domain_list=$($MYSQL_STR -e "select lcase(name) from domains d, sys_users u where d.suid = u.id" | $_sed '1d');;
# Do a full restart of apache, assuming its already running
	"--restart") restart_httpd=1;;
# Turn on verbose output
	"-v") verbose=1;;
# This argument is one of the domains, add it to the domain_list
	*) domain_list="$1 $domain_list";;
    esac

# Pop off the $1 so we either finish the while loop or go to the next item

    shift

done

# Make sure we have a domain_list. It must be in quotes

#if [ -z "$domain_list" ]; then

#    usage

#fi

# We write to httpd.include files a lot. Here is a simple function for it

echo_e() {

    $_echo -e $1 >> $VHOST_ROOT/$domain_name/conf/httpd.include

}

# A function to print out the server aliases for a domain

server_alias() {
    
    for i in `$MYSQL_STR -e "select lcase(name) from domains where host_type = 'alias' and redirect_url = '$domain_name'" | $_sed '1d'`; do
	
	echo_e "\tServerAlias  "$i

	v_echo "$domain_name has server alias $i"

	case $($MYSQL_STR -e "select www from domains where name = '$i'" | $_sed '1d') in
	    true)
		echo_e "\tServerAlias  www."$i
		v_echo "$domain_name has server alias www.$i"
		;;
	esac
	
    done
    
}

# A function to make a physical hosting virtualhost tag

mk_vrt() {

# Our argument is whether this is an ssl virtualhost or not

    ssl=$1

# Unset our values

    www=
    php=
    cgi=
    dir=

# Build the arguments list, of what to setup this domain for

    tmp=$($MYSQL_STR -e "select www,host_php,host_cgi,host_dir from domains where name = '$domain_name'\G" | $_sed '1d')

    for arg in `$_echo $tmp | $_sed 's/: /:/g'`; do

# Substattue out the "true" if it exists. If it is false, it won't match the follow case statement

        arg=$($_echo $arg | $_sed 's/:true//')

# Set our values appropriatly

	case $arg in
	    www) www=1
		v_echo "$domain_name has server alias www.$domain_name";;
	    host_php) php=1
		v_echo "$domain_name is setup for php";;
	    host_cgi) cgi=1
		v_echo "$domain_name is setup for cgi";;
	    host_dir) dir=1
		v_echo "$domain_name is setupu for indexing";;
	    *) ;;
	esac
    
    done

# If this tag is ssl, the port is 443

    if [ $ssl ]; then
	port=443
	v_echo "$domain_name is setup for ssl"
	echo_e "<IfModule mod_ssl.c>"
    else
	port=80
    fi
    
    echo_e "<VirtualHost *:"$port">"
    echo_e "\tServerName   "$domain_name":"$port""

    if [ $www ]; then
	echo_e "\tServerAlias  www."$domain_name
    fi

# Does this domain have any aliases for it?

    server_alias

# Add the Suexec module for this vhost. Disabled for now, until we find a good way to detect
# if the module for this is loaded
    
#    echo_e "\tSuexecUserGroup\t"$ftp_user" servgrp"
    
# Define the directory's document root

    echo_e "\tDocumentRoot "$VHOST_ROOT"/"$domain_name"/httpdocs"

# Make sure that the access and error log files exist

    if [ $ssl ]; then

	touch -a $VHOST_ROOT/$domain_name/var/log/ssl_access_log
	echo_e "\tCustomLog  "$VHOST_ROOT"/"$domain_name"/var/log/ssl_access_log combined"
	touch -a $VHOST_ROOT/$domain_name/var/log/ssl_error_log
	echo_e "\tErrorLog   "$VHOST_ROOT"/"$domain_name"/var/log/ssl_error_log"
	
    else
	
	touch -a $VHOST_ROOT/$domain_name/var/log/access_log
	echo_e "\tCustomLog  "$VHOST_ROOT"/"$domain_name"/var/log/access_log combined"
	touch -a $VHOST_ROOT/$domain_name/var/log/error_log
	echo_e "\tErrorLog   "$VHOST_ROOT"/"$domain_name"/var/log/error_log"
	
    fi

# If you want to setup web users, you can create a web_users directory
    
    echo_e "\t<IfModule mod_userdir.c>"
    echo_e "\tUserDir $VHOST_ROOT/"$domain_name"/web_users"
    echo_e "\t</IfModule>"

    if [ $cgi ]; then
	$_mkdir -p $VHOST_ROOT/$domain_name/cgi-bin
	$_chmod 750 $VHOST_ROOT/$domain_name/cgi-bin
	$_chown $ftp_user:servgrp $VHOST_ROOT/$domain_name/cgi-bin &> /dev/null
	echo_e "\tScriptAlias  /cgi-bin/ "$VHOST_ROOT"/"$domain_name"/cgi-bin/"
    else
	$_rm -rf $VHOST_ROOT/$domain_name/cgi-bin
    fi
    
# If the awstats configuration file doesn't exist, build it
    
    if [ ! -f $VHOST_ROOT/$domain_name/conf/awstats.$domain_name.conf ]; then
	
# Copy the model conf file as this domains conf file
	
	$_cp -f $RC_ROOT/etc/awstats.model.conf.in $VHOST_ROOT/$domain_name/conf/awstats.$domain_name.conf
	
# Run the needed perl pie statements to edit the config file appropriatly
	
	$_perl -p -i -e "s|LogFile=\".*\"|LogFile=\"$VHOST_ROOT/$domain_name/var/log/access_log.1\"|" $VHOST_ROOT/$domain_name/conf/awstats.$domain_name.conf

	$_perl -p -i -e "s|SiteDomain=\".*\"|SiteDomain=\"$domain_name\"|" $VHOST_ROOT/$domain_name/conf/awstats.$domain_name.conf

# do we want to do this this?    HostAliases="localhost 127.0.0.1"
	$_perl -p -i -e "s|DirData=\".*\"|DirData=\"$VHOST_ROOT/$domain_name/var/awstats\"|" $VHOST_ROOT/$domain_name/conf/awstats.$domain_name.conf
	
    fi

    if [ $ssl ]; then

	echo_e "\tSSLEngine on"
        echo_e "\tSSLVerifyClient none"

	ssl_cert=$($MYSQL_STR -e "select value from parameters p inner join domains d on p.type_id = d.id where param = 'ssl_cert' and d.name = '$domain_name'" | $_sed '1d')

	if [ -f "$ssl_cert" ]; then
	    echo_e "\tSSLCertificateFile $ssl_cert"
	    echo_e "\tSSLCertificateKeyFile $ssl_cert.key"
	else
	    echo_e "\tSSLCertificateFile /etc/httpd/conf/ssl.crt/server.crt"
	    echo_e "\tSSLCertificateKeyFile /etc/httpd/conf/ssl.key/server.key"
	fi

    else

	echo_e "\t<IfModule mod_ssl.c>"
	echo_e "\t\tSSLEngine off"
        echo_e "\t</IfModule>"

    fi

# Begin the setup fir the virtual directory of this domain's web root
    
    echo_e "\t<Directory "$VHOST_ROOT"/"$domain_name"/httpdocs>"

# Add directory listing if set

    if [ $dir ]; then

	echo_e "\tOptions +Indexes"

    else

	echo_e "\tOptions -Indexes"

    fi

# Setup php if appropriate
    
    if [ $php ]; then
	
	echo_e "\t<IfModule sapi_apache2.c>"
	echo_e "\t\tphp_admin_flag engine on"
	echo_e "\t\tphp_admin_value open_basedir \"$VHOST_ROOT/$domain_name\""
	echo_e "\t\tphp_admin_value upload_tmp_dir \"$VHOST_ROOT/$domain_name/tmp\""
	echo_e "\t\tphp_admin_value session.save_path \"$VHOST_ROOT/$domain_name/tmp\""
	echo_e "\t</IfModule>"
	
    else

# Else, disable php

        echo_e "\t<IfModule sapi_apache2.c>"
	echo_e "\t\tphp_admin_flag engine off"
        echo_e "\t</IfModule>"

    fi
    
# Setup cgi if appropriate
    
    if [ $cgi ]; then
	
	echo_e "\t\tOptions +Includes +ExecCGI"
	echo_e "\t<IfModule mod_perl.c>"
	echo_e "\t<Files ~ (\.pl)>"
	echo_e "\t\tSetHandler perl-script"
	echo_e "\t\tPerlHandler ModPerl::Registry"
	echo_e "\t\tallow from all"
	echo_e "\t\tPerlSendHeader On"
	echo_e "\t</Files>"
	echo_e "\t</IfModule>"	
	
    fi
    
# We're done with the virtual directory setup
    
    echo_e "\t</Directory>"
    
# Setup this domains error documents

    for i in `$MYSQL_STR -e "select concat(code, ':', file) from error_docs where did = '$did'" | $_sed '1d'`; do

	code=$($_echo $i | $_sed 's/:.*//')
	file=$($_echo $i | $_sed 's/.*://')
	
	echo_e "\tErrorDocument "$code" "$file

	v_echo "$domain_name has ErrorDocument $code $file"

    done

# If a vhost.conf file exists for this domain, include it
    
    if [ -f $VHOST_ROOT/$domain_name/conf/vhost.conf ]; then 
	
	echo_e "\tInclude "$VHOST_ROOT"/"$domain_name"/conf/vhost.conf"

	v_echo "$domain_name has a vhost.conf file"
	
    fi

# End our virtual host tag
    
    echo_e "</VirtualHost>"    
    echo_e ""

    if [ $ssl ]; then

	echo_e "</IfModule>"

    fi
    
}

# Always make sure that the vhost root is readable

$_mkdir -p $VHOST_ROOT

tmp=

for i in `$_echo $VHOST_ROOT | $_sed 's|/| |g'`; do

    $_chmod 755 $tmp/$i

    tmp=$tmp/$i;

done

$_chmod 750 $VHOST_ROOT
$_chown root:servgrp $VHOST_ROOT

# Loop through the domain list

for i in $domain_list; do

    v_echo "Rebuilding configuration for $i"

    tmp=$($MYSQL_STR -e "select concat(d.id, ':', lcase(name), ':', lcase(login)) from domains d, sys_users u where d.suid = u.id and name = '$i'" | $_sed '1d')

# if this domain doesn't exist in the database, echo error and go to the next element in the loop

    if [ -z "$tmp" ]; then

	v_echo "$i doesn't exist on the server"

	continue

    fi

# Split the value from the colon into their respective variables

    did=$($_echo $tmp | $_sed 's/:/ /g' | $_awk '{print $1}')
    domain_name=$($_echo $tmp | $_sed 's/:/ /g' | $_awk '{print $2}')
    ftp_user=$($_echo $tmp | $_sed 's/:/ /g' | $_awk '{print $3}')

#
# have a case statement here for domains which are either on or off
#

#
# have a case statement here ( in the on section of the previous one ) for the host_type of the domain,
# phyiscal, redirect, alias, or none.
#

# Check to see if the ftp user exists. If it doesn't exist, attempt to add it

    if [ -z "$($_grep "^$ftp_user:" /etc/passwd)" ]; then

	$RC_ROOT/bin/rehash_ftp $ftp_user

    fi

# Make sure the proper directories exist and that they are set to the correct permissions

    $_mkdir -p \
	$VHOST_ROOT/$domain_name/conf \
	$VHOST_ROOT/$domain_name/var/log \
	$VHOST_ROOT/$domain_name/var/awstats \
	$VHOST_ROOT/$domain_name/httpdocs \
	$VHOST_ROOT/$domain_name/tmp

# We probably want to check for error here, but that is for a later release
    $_chown $ftp_user:servgrp $VHOST_ROOT/$domain_name/{tmp,httpdocs} &> /dev/null
    $_chmod 750 $VHOST_ROOT/$domain_name/{.,httpdocs}
    $_chmod 770 $VHOST_ROOT/$domain_name/tmp
    $_chown root:servgrp $VHOST_ROOT/$domain_name

# Get the old include file out of the way
    
    $_rm -f $VHOST_ROOT/$domain_name/conf/httpd.include

# Build the virtual host tag

    case $($MYSQL_STR -e "select host_ssl from domains where id = '$did'" | $_sed '1d') in
	true)
# use the mk_vrt function twice, one with ssl and one without
	    mk_vrt 1
	    mk_vrt
	    ;;
	*)
# we have not ssl, use the mk_vrt function once
	    mk_vrt
	    ;;
    esac

done

# set the vhosts file

vhosts=$RC_ROOT/etc/vhosts.conf

# Get rid of the vhost file, if it exists

if [ -f $vhosts ]; then

    $_mv -f $vhosts $vhosts.old
    $_touch $vhosts

fi

# make sure that no other apache configuration denies access to the domains

$_cat <<EOF > $vhosts
<Directory $VHOST_ROOT>
Order allow,deny
Allow from all
</Directory>
EOF

# get the compiled in server root and server config file
httpd_server_root=$($HTTPD -V | $_grep HTTPD_ROOT | $_sed 's/=/ /' | $_awk '{print $3}' | $_sed 's/"//g')
httpd_config_file=$($HTTPD -V | $_grep SERVER_CONFIG_FILE | $_sed 's/=/ /' | $_awk '{print $3}' | $_sed 's/"//g')

# look for the path to the apache conf file

if [ -f $httpd_server_root/$httpd_config_file ]; then
    
    httpd_config_file="$httpd_server_root/$httpd_config_file"
    
elif [ ! -f $httpd_config_file ]; then
    
# if there is no file existing in $httpd_server_root/$httpd_config_file or $httpd_config_file , then
# we can't look up what user apache will run as
    
    $_echo "Unable to find apache's compiled in configuration file"
    $_echo "HTTPD_ROOT=$httpd_server_root"
    $_echo "SERVER_CONFIG_FILE=$httpd_config_file"
    
    exit 1
    
fi

# check to make sure we're included in the apache conf file

$_grep "Include $vhosts" $httpd_config_file &> /dev/null

if [ $? -ne 0 ]; then

# if not, append to it

    $_echo "Include $vhosts" >> $httpd_config_file

fi

# Rebuild the vhosts.conf file

$_echo "NameVirtualHost *:80" >> $vhosts
$_echo "NameVirtualHost *:443" >> $vhosts

v_echo "Rebuilding the vhosts.conf file"

for i in `$MYSQL_STR -e "select lcase(name) from domains d, sys_users u where d.suid = u.id and host_type = 'physical' and hosting = 'on'" | $_sed '1d'`; do
    
# Add this domain's include file to the master vhosts.conf
    
    $_echo "Include "$VHOST_ROOT"/"$i"/conf/httpd.include" >> $vhosts
    
done

for i in `$MYSQL_STR -e "select concat(lcase(name), ':::', redirect_url) from domains where host_type = 'redirect' and hosting = 'on'" | $_sed '1d'`; do

    domain_name=$($_echo $i | $_sed 's/:::.*//')
    redirect_url=$($_echo $i | $_sed 's/.*::://')

# Make sure this domain doesn't exist in the vhost root

    $_rm -rf $VHOST_ROOT/$domain_name

# Unset values

    www=

# Does this domain support www alias

    case $($MYSQL_STR -e "select www from domains where id = '$did'" | $_sed '1d') in
	true) www=1;;
    esac
    
    $_echo "<VirtualHost *:80>" >> $vhosts
    $_echo -e "\tServerName\t"$domain_name >> $vhosts
    if [ $www ]; then
	$_echo -e "\tServerAlias  www."$domain_name":"$port >> $vhosts
    fi
    
    server_alias

    $_echo -e "\tRedirectPermanent / \""$redirect_url"\"" >> $vhosts
    $_echo "</VirtualHost>" >> $vhosts

    $_echo "" >> $vhosts

done

# remove legacy file
$_rm -f /etc/httpd/conf.d/httpd-include.conf

# Test to be sure we can restart apache. Save the results to http_tmp

$HTTPD -t &> http_tmp.$$

if [ $? -ne 0 ]; then

# cat out what the error was
    $_cat http_tmp.$$
    $_echo "Not restarting apache"
# remove the tmp file
    $_rm -f http_tmp.$$
    
    exit 1

fi

$_rm -f http_tmp.$$

$_pidof $HTTPD &> /dev/null

# if we are running, reload or restart

if [ $? -eq 0 ]; then

    [ -n "$restart_httpd" ] && cmd=restart
    [ -z "$restart_httpd" ] && cmd=reload

    $INITD/$HTTPD_INIT $cmd &> /dev/null

else

# otherwse, start apache

    $INITD/$HTTPD_INIT start &> /dev/null

fi

