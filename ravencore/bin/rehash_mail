#!/bin/bash
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

. /etc/ravencore.conf || exit 1

if [ ! -x $RC_ROOT/conf.d/mail.conf ]; then

    echo "Not a mail server, exiting"
    exit 1

fi


if [ ! -d $VMAIL_ROOT ]; then

    mkdir -p $VMAIL_ROOT

fi

cd $VMAIL_ROOT

touch vmaildomains.$$
touch valiasmap.$$
touch vmailbox.$$
touch vtransportmap.$$
touch login_maps.$$
touch dovecot-passwd.$$

# individual mail addresses

for i in $($MYSQL_STR -e "select concat(m.id, ':', lcase(mail_name), ':', lcase(name), ':', mailbox, ':', spam_folder, ':', m.passwd) from domains d, mail_users m where did = d.id and d.mail = 'on' order by name" | sed '1d'); do

# separate the string into a temp variable so we don't have to make several calls to to the sed command
# buxfix - there IS the cut command guys! -spc
    
    mid=$(echo $i | cut -d: -f1)
    mail_name=$(echo $i | cut -d: -f2)
    domain_name=$(echo $i | cut -d: -f3)
    mailbox=$(echo $i | cut -d: -f4)
    spam_folder=$(echo $i | cut -d: -f5)
    mail_pass=$(echo $i | cut -d: -f6)
    
    email_addr="$mail_name@$domain_name"

    v_echo "Rebuilding configuration for $email_addr"

    mkdir -p $domain_name/$mail_name
    chown $VMAIL_UID:$VMAIL_GID $domain_name
    chown $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name

# chech for the imap .subscriptions
    
    subscriptions=$domain_name/$mail_name/.subscriptions
    
    if [ ! -f $subscriptions ]; then
	
	for dir in Sent Trash Drafts; do

	    if [ ! -d $domain_name/$mail_name/.$dir ]; then
		mkdir -p $domain_name/$mail_name/.$dir/{cur,new,tmp}
		chown -R $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name/.$dir
		chmod -R 700 $domain_name/$mail_name/.$dir
	    fi

	    echo $dir >> $subscriptions
	    
	done
	
	chown $VMAIL_UID:$VMAIL_GID $subscriptions
	chmod 600 $subscriptions
	
    fi

# put this email in the virtual mailbox and transport tables

    echo -e "$email_addr\t\tvirtual:" >> vtransportmap.$$
    echo -e "$email_addr\t\t$domain_name/$mail_name/" >> vmailbox.$$
    case $spam_folder in
	"true") echo -e "$mail_name+spam@$domain_name\t\t$domain_name/$mail_name/.Spam/" >> vmailbox.$$
	    grep '^Spam$' $subscriptions &> /dev/null
	    if [ $? -eq 1 ]; then
		echo Spam >> $subscriptions
		mkdir -p $domain_name/$mail_name/.Spam/{cur,new,tmp}
		chown -R $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name/.Spam
		chmod -R 700 $domain_name/$mail_name/.Spam
	    fi
	    ;;
    esac

# check to see if this email should have any redirects

# first, unset the alias_map variable

    alias_map=""

# if this is a local mailbox, tell the alias_map to deliver locally

    case $mailbox in
	true) alias_map=$email_addr;;
    esac

# now loop for redirects

    for i in $($MYSQL_STR -e "select redirect_addr from mail_users where redirect = 'true' and id = '$mid'" | sed '1d'); do

# if $alias_map is emtpy, we don't start with a comma

	if [ -z "$alias_map" ]; then

	    alias_map=$i

	else

	    alias_map="$alias_map,$i"

	fi

    done

# only put this entry in valiasmap if the variable exists
    
    if [ -n "$alias_map" ]; then

	echo -e "$email_addr\t\t$alias_map" >> valiasmap.$$

    fi

# put this email in login_maps

    echo -e "$email_addr\t\t$email_addr" >> login_maps.$$

# smtp SASL authentication

# check to see if users exists

    sasldblistusers2 | grep "$mail_name@$domain_name" &> /dev/null

    if [ $? -ne 0 ]; then
	
# user does not exist, create it with -c
	
	sasl_action="-c"

    else

# make sure we unset it, so a previous -c won't carry over

	sasl_action=""
	
    fi

# set sasl passwd for users with a mailbox
    case $mailbox in
        true)
	    echo $mail_pass | saslpasswd2 $sasl_action -p -u $domain_name $mail_name
	    ;;
    esac

# build a random 2 letter "salt" string for use in the perl crypt fucntion in the docevat passwd-file below

    salt_str=$(perl -e 'for($i=0;$i<2;$i++){print pack("C",int(rand(26))+65);}')

# dovecot passwd-file authentication

    echo $email_addr:$(perl -e "print crypt('$mail_pass','$salt_str');"):$VMAIL_UID:$VMAIL_GID::$VMAIL_ROOT/$domain_name/$mail_name:/bin/false >> dovecot-passwd.$$

done

# handle catchalls. we concat semicolons here because the relay_host might have a : character in it

for i in $($MYSQL_STR -e "select concat(name,';',catchall,';',catchall_addr,';',relay_host) from domains where mail = 'on' order by name" | sed '1d'); do

    domain_name=$(echo $i | cut -d\; -f1)
    catchall=$(echo $i | cut -d\; -f2)
    catchall_addr=$(echo $i | cut -d\; -f3)
    relay_host=$(echo $i | cut -d\; -f4)

    case $catchall in
	"send_to")
	    echo -e "@$domain_name\t\t$catchall_addr" >> valiasmap.$$
	    echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
# for legacy support
	"true")
            echo -e "@$domain_name\t\t$catchall_addr" >> valiasmap.$$
            echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
            ;;
	"bounce")
# find their bounce message
	    bounce_message=$($MYSQL_STR -e "select bounce_message from domains where name = '$domain_name'" | sed '1d')
	    echo -e "$domain_name\t\terror:$bounce_message" >> vtransportmap.$$
	    ;;
	"delete_it")
            echo -e "@$domain_name\t\tdevnull" >> valiasmap.$$
            echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
	"alias_to")
	    alias_addr=$($MYSQL_STR -e "select alias_addr from domains where name = '$domain_name'" | sed '1d')
	    echo -e "@$domain_name\t\t@$alias_addr" >> valiasmap.$$
            echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
        "relay") # relay transport addition by spectro - slightly modified by cormander
            echo -ne "$domain_name\t\trelay:" >> vtransportmap.$$
# only add the [ ] around the relay_host if we want to force an MX lookup
	    echo -e $relay_host >> vtransportmap.$$
            ;;

# we don't want to do anything with the default, *)

    esac

done

#
# build the virtual domains table
#

# domains that have a catchall of relay are handeled in the vtransportmaps. Any email for the domain to 
# go locally will be directed straight to virtual: , while the rest will go remote because it isn't in
# the vmaildomains. If it was, it'll attempt to deliver those mails locally too, and give a reject message.

for domain_name in $($MYSQL_STR -e "select name from domains where mail = 'on' and catchall != 'relay'" | sed '1d'); do

    echo -e "$domain_name\t\tplaceholder" >> vmaildomains.$$

done

mv -f vmaildomains.$$ $VMAIL_CONF_DIR/vmaildomains
mv -f vmailbox.$$ $VMAIL_CONF_DIR/vmailbox
mv -f vtransportmap.$$ $VMAIL_CONF_DIR/vtransportmap
mv -f login_maps.$$ $VMAIL_CONF_DIR/login_maps
mv -f valiasmap.$$ $VMAIL_CONF_DIR/valiasmap

mv -f dovecot-passwd.$$ /etc/dovecot-passwd
chown dovecot:dovecot /etc/dovecot-passwd
chmod 400 /etc/dovecot-passwd

postmap $VMAIL_CONF_DIR/vmaildomains
postmap $VMAIL_CONF_DIR/vmailbox
postmap $VMAIL_CONF_DIR/vtransportmap
postmap $VMAIL_CONF_DIR/login_maps
postmap $VMAIL_CONF_DIR/valiasmap

# make sure our conf files are correctly set

$RC_ROOT/sbin/checkconf.mail

