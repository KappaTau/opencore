#!/bin/bash
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

. /etc/ravencore.conf || exit 1

if [ ! -x $RC_ROOT/conf.d/mail.conf ]; then

    $_echo "Not a mail server, exiting"
    exit 1

fi


if [ ! -d $VMAIL_ROOT ]; then

    $_mkdir -p $VMAIL_ROOT

fi

# The system user mail will run as
VMAIL_USER=vmail

# make sure we have the the vmail user / group
# check the group first, because in order to add the user, we need a valid existing gid

$_groupmod vmail 2> /dev/null

if [ $? -ne 0 ]; then

    $_groupadd $USERADD_R vmail

fi

$_usermod -g vmail vmail 2> /dev/null

if [ $? -ne 0 ]; then

    $_useradd $USERADD_R -g vmail -d $VMAIL_ROOT -s /bin/false vmail

fi

# The system uid and gid of the mail user
VMAIL_UID=$($_id -u $VMAIL_USER 2> /dev/null)
VMAIL_GID=$($_id -g $VMAIL_USER 2> /dev/null)

#

$_cd $VMAIL_ROOT

$_touch vmaildomains.$$
$_touch valiasmap.$$
$_touch vmailbox.$$
$_touch vtransportmap.$$
$_touch login_maps.$$
$_touch dovecot-passwd.$$
$_touch relay_domains.$$

# check to make sure that the /etc/sasldb2 file isn't corrupt

if [ -f /etc/sasldb2 ]; then
    
# echo a blank ( no return caracter, no nothing ) into a diff with the file

    $_echo -n | $_diff /etc/sasldb2 - &> /dev/null

# if its a match, nuke it so it will be rebuilt by the sasl commands
    
    [ $? -eq 0 ] && $_rm -f /etc/sasldb2
    
fi

# individual mail addresses

for i in $($DATA_QUERY "select concat(m.id, ':', lcase(mail_name), ':', lcase(name), ':', mailbox, ':', spam_folder, ':', m.passwd) from domains d, mail_users m where did = d.id and d.mail = 'on' order by name"); do

# separate the string into a temp variable so we don't have to make several calls to to the sed command
# buxfix - there IS the cut command guys! -spc
    
    mid=$($_echo $i | $_cut -d: -f1)
    mail_name=$($_echo $i | $_cut -d: -f2)
    domain_name=$($_echo $i | $_cut -d: -f3)
    mailbox=$($_echo $i | $_cut -d: -f4)
    spam_folder=$($_echo $i | $_cut -d: -f5)
    mail_pass=$($_echo $i | $_cut -d: -f6)
    
    email_addr="$mail_name@$domain_name"

    v_echo "Rebuilding configuration for $email_addr"

    $_mkdir -p $domain_name/$mail_name
    $_chown $VMAIL_UID:$VMAIL_GID $domain_name
    $_chown $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name

# chech for the imap .subscriptions
    
    subscriptions=$domain_name/$mail_name/.subscriptions
    
    if [ ! -f $subscriptions ]; then
	
	for dir in Sent Trash Drafts; do

	    if [ ! -d $domain_name/$mail_name/.$dir ]; then
		$_mkdir -p $domain_name/$mail_name/.$dir/{cur,new,tmp}
		$_chown -R $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name/.$dir
		$_chmod -R 700 $domain_name/$mail_name/.$dir
	    fi

	    $_echo $dir >> $subscriptions
	    
	done
	
	$_chown $VMAIL_UID:$VMAIL_GID $subscriptions
	$_chmod 600 $subscriptions
	
    fi

# put this email in the virtual mailbox and transport tables

    $_echo -e "$email_addr\t\tvirtual:" >> vtransportmap.$$
    $_echo -e "$email_addr\t\t$domain_name/$mail_name/" >> vmailbox.$$
    case $spam_folder in
	"true") $_echo -e "$mail_name+spam@$domain_name\t\t$domain_name/$mail_name/.Spam/" >> vmailbox.$$
	    $_grep '^Spam$' $subscriptions &> /dev/null
	    if [ $? -eq 1 ]; then
		$_echo Spam >> $subscriptions
		$_mkdir -p $domain_name/$mail_name/.Spam/{cur,new,tmp}
		$_chown -R $VMAIL_UID:$VMAIL_GID $domain_name/$mail_name/.Spam
		$_chmod -R 700 $domain_name/$mail_name/.Spam
	    fi
	    ;;
    esac

# check to see if this email should have any redirects

# first, unset the alias_map variable

    alias_map=""

# if this is a local mailbox, tell the alias_map to deliver locally

    case $mailbox in
	true) alias_map=$email_addr;;
    esac

# now loop for redirects

    for i in $($DATA_QUERY "select redirect_addr from mail_users where redirect = 'true' and id = '$mid'"); do

# if $alias_map is emtpy, we don't start with a comma

	if [ -z "$alias_map" ]; then

	    alias_map=$i

	else

	    alias_map="$alias_map,$i"

	fi

    done

# only put this entry in valiasmap if the variable exists
    
    if [ -n "$alias_map" ]; then

	$_echo -e "$email_addr\t\t$alias_map" >> valiasmap.$$

    fi

# put this email in login_maps

    $_echo -e "$email_addr\t\t$email_addr" >> login_maps.$$

# smtp SASL authentication

# check to see if users exists

    $_sasldblistusers2 2> /dev/null | $_grep "$mail_name@$domain_name" &> /dev/null

    if [ $? -ne 0 ]; then
	
# user does not exist, create it with -c
	
	sasl_action="-c"

    else

# make sure we unset it, so a previous -c won't carry over

	sasl_action=""
	
    fi

# set sasl passwd for users with a mailbox
    case $mailbox in
        true)
	    echo $mail_pass | $_saslpasswd2 $sasl_action -p -u $domain_name $mail_name
	    ;;
    esac

# build a random 2 letter "salt" string for use in the perl crypt fucntion in the docevat passwd-file below

    salt_str=$($_perl -e 'for($i=0;$i<2;$i++){print pack("C",int(rand(26))+65);}')

# dovecot passwd-file authentication

    $_echo $email_addr:$($_perl -e "print crypt('$mail_pass','$salt_str');"):$VMAIL_UID:$VMAIL_GID::$VMAIL_ROOT/$domain_name/$mail_name:/bin/false >> dovecot-passwd.$$

done

# handle catchalls. we concat semicolons here because the relay_host might have a : character in it

for i in $($DATA_QUERY "select concat(name,';',catchall,';',catchall_addr,';',relay_host) from domains where mail = 'on' order by name"); do

    domain_name=$($_echo $i | $_cut -d\; -f1)
    catchall=$($_echo $i | $_cut -d\; -f2)
    catchall_addr=$($_echo $i | $_cut -d\; -f3)
    relay_host=$($_echo $i | $_cut -d\; -f4)

    case $catchall in
	"send_to")
	    $_echo -e "@$domain_name\t\t$catchall_addr" >> valiasmap.$$
	    $_echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
# for legacy support
	"true")
            $_echo -e "@$domain_name\t\t$catchall_addr" >> valiasmap.$$
            $_echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
            ;;
	"bounce")
# find their bounce message
	    bounce_message=$($DATA_QUERY "select bounce_message from domains where name = '$domain_name'")
	    $_echo -e "$domain_name\t\terror:$bounce_message" >> vtransportmap.$$
	    ;;
	"delete_it")
            $_echo -e "@$domain_name\t\tdevnull" >> valiasmap.$$
            $_echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
	"alias_to")
	    alias_addr=$($DATA_QUERY "select alias_addr from domains where name = '$domain_name'")
	    $_echo -e "@$domain_name\t\t@$alias_addr" >> valiasmap.$$
            $_echo -e "$domain_name\t\tvirtual:" >> vtransportmap.$$
	    ;;
        "relay") # relay transport addition by spectro - slightly modified by cormander
            $_echo -ne "$domain_name\t\trelay:" >> vtransportmap.$$
# only add the [ ] around the relay_host if we want to force an MX lookup
	    $_echo -e $relay_host >> vtransportmap.$$
            ;;

# we don't want to do anything with the default, *)

    esac

done

#
# build the virtual domains table
#

sq_vlogin_file=$RC_ROOT/var/apps/squirrelmail/plugins/vlogin/data/domains/ravencore.vlogin.config.php

$_cat <<EOF > $sq_vlogin_file
<?php

  // Do not edit this file manually, it'll get overwritten by RavenCore the next time
  // an email account is updated.

  // Global Variables, don't touch these unless you want to break the plugin
  //
  global \$notPartOfDomainName, \$numberOfDotSections, \$useSessionBased,
         \$putHostNameOnFrontOfUsername, \$checkByExcludeList,
         \$at, \$dot, \$dontUseHostName, \$perUserSettingsFile,
         \$smHostIsDomainThatUserLoggedInWith, \$virtualDomains,
         \$sendmailVirtualUserTable, \$virtualDomainDataDir,
         \$allVirtualDomainsAreUnderOneHost, \$vlogin_debug, \$removeFromFront,
         \$chopOffDotSectionsFromRight, \$chopOffDotSectionsFromLeft,
         \$translateHostnameTable, \$pathToQmail, \$atConversion,
         \$removeDomainIfGiven, \$alwaysAddHostName, \$reverseDotSectionOrder,
         \$replacements, \$usernameReplacements, \$forceLowercase,
         \$securePort, \$useDomainFromVirtDomainsArray,
         \$usernameDomainIsHost, \$stripDomainFromUserSubstitution,
         \$serviceLevelBackend, \$internalServiceLevelFile,
         \$vlogin_dsn, \$sqlServiceLevelQuery;

  \$virtualDomains = array(

EOF

#

$_chown rcadmin:servgrp $RC_ROOT/var/apps/squirrelmail/data/* &> /dev/null
$_chmod 660 rcadmin:servgrp $RC_ROOT/var/apps/squirrelmail/data/* &> /dev/null

# domains that have a catchall of relay are handeled in the vtransportmaps. Any email for the domain to 
# go locally will be directed straight to virtual: , while the rest will go remote because it isn't in
# the vmaildomains. If it was, it'll attempt to deliver those mails locally too, and give a reject message.

for domain_name in $($DATA_QUERY "select name from domains where mail = 'on' and catchall != 'relay'"); do

    $_echo -e "$domain_name\t\tplaceholder" >> vmaildomains.$$
    $_echo -e "\t\t'$domain_name' => array('org_name' => '$domain_name')," >> $sq_vlogin_file

done

# build the list of domains this server is allowed to relay for

for domain_name in $($DATA_QUERY "select name from domains where mail = 'on' and catchall = 'relay'"); do

    $_echo -e "$domain_name\t\tplaceholder" >> relay_domains.$$
    $_echo -e "\t\t'$domain_name' => array('org_name' => '$domain_name')," >> $sq_vlogin_file

done

$_cat <<EOF >> $sq_vlogin_file

  );

  \$vlogin_debug = 0;

?>

EOF

$_mv -f vmaildomains.$$ $VMAIL_CONF_DIR/vmaildomains
$_mv -f vmailbox.$$ $VMAIL_CONF_DIR/vmailbox
$_mv -f vtransportmap.$$ $VMAIL_CONF_DIR/vtransportmap
$_mv -f login_maps.$$ $VMAIL_CONF_DIR/login_maps
$_mv -f valiasmap.$$ $VMAIL_CONF_DIR/valiasmap
$_mv -f relay_domains.$$ $VMAIL_CONF_DIR/relay_domains

$_mv -f dovecot-passwd.$$ /etc/dovecot-passwd
$_chown dovecot:dovecot /etc/dovecot-passwd
$_chmod 400 /etc/dovecot-passwd

$_postmap $VMAIL_CONF_DIR/vmaildomains
$_postmap $VMAIL_CONF_DIR/vmailbox
$_postmap $VMAIL_CONF_DIR/vtransportmap
$_postmap $VMAIL_CONF_DIR/login_maps
$_postmap $VMAIL_CONF_DIR/valiasmap
$_postmap $VMAIL_CONF_DIR/relay_domains

# make sure our conf files are correctly set

$RC_ROOT/sbin/checkconf.mail

[ -x $RC_ROOT/conf.d/amavisd.conf ]&& $RC_ROOT/sbin/checkconf.amavisd
