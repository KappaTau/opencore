#!/bin/bash
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

. /etc/ravencore.conf || exit 1

# This script's usage output

usage() {

    echo "Usage: rehash_named [options] domain_list"
    echo -e "\t--rebuild-conf  Rebuild named.conf file"
    echo -e "\t--all           Rebuild dns configuration for all domains on the server"
    echo -e "\t-v              Be verbose"
    echo -e "\n\t                domain_list is one or more domains, seperated by spaces"
    exit 1

}

# We must have atleast one argument to run

if [ $# -eq 0 ]; then

    usage

fi

rebuild_conf=0

while [ "$1" ]; do

    case $1 in
# Run mysql query to get a list of all domains with physical hosting
        "--all") domain_list=$($MYSQL_STR -e "select distinct d.name from domains d, dns_rec r where r.did = d.id and d.soa is not null" | sed '1d');;
#
	"--rebuild-conf") rebuild_conf=1;;
# Turn on verbose output
        "-v") verbose=1;;
# This argument is one of the domains, add it to the domain_list
        *) domain_list="$1 $domain_list";;
    esac

# Pop off the $1 so we either finish the while loop or go to the next item

    shift

done

# Make sure we either have a domain_list, or we're rebuilding our conf file

if [ ! "$domain_list" ] && [ $rebuild_conf -eq 0 ]; then

    usage

fi

# Some checks

if [ -z $NAMED_ROOT ]; then

    echo "Fatal error: NAMED_ROOT not defined"

    exit 1

fi

if [ ! -d $NAMED_ROOT ]; then

    echo "Fatal error: $NAMED_ROOT does not exist"

    exit 1

fi



# Change directory into the named root

cd $NAMED_ROOT

# If our num file doesn't exist, give it a value of 10

if [ ! -f num ]; then
    
    echo 10 > num
    
fi

# Increment the value

num=$(expr `cat num` + 1)

# If the value is greater then 99, set it back to 10

if [ $num -gt 99 ]; then
    
    num=10
    
fi

# Store our new value in the file we got it from

echo $num > num

# Loop through our domain list

for domain_name in $domain_list; do

    did=$($MYSQL_STR -e "select id from domains where name = '$domain_name'" | sed '1d')
    
# Create this domain's SOA record
    
    tmp=$($MYSQL_STR -e "select concat(name,':',soa) from domains where id = '$did'" | sed '1d')
    
    host_master=$(echo $tmp | sed 's/:.*//')
    soa=$(echo $tmp | sed 's/.*://')
    
    cat <<EOFDOM > $domain_name.$$
\$TTL    300

@       IN      SOA     $soa admin (
                        $(date +%Y%m%d)$num      ; Serial
                        10800   ; Refresh
                        3600    ; Retry
                        604800  ; Expire
                        86400 ) ; Minimum

EOFDOM

# Loop through the records for this domain

    for i in `$MYSQL_STR -e "select concat(name,':',type,':',target) from dns_rec where did = '$did' order by type, name, target" | sed '1d'`; do
	
	name=$(echo $i | sed 's/:/ /g' | awk '{print $1}')
	target=$(echo $i | sed 's/:/ /g' | awk '{print $3}')
	
# This may be an MX record. We seperate the MX token and the preference
# with a - symbol, so replace this with a space

	type=$(echo $i | sed 's/:/ /g' | awk '{print $2}' | sed 's/-/ /')
	
	echo -e "$name\t\tIN $type\t$target" >> $domain_name.$$
	
    done
    
# Check to make sure this domain has enough DNS entries to be safely put into
# the configuration
    
    /usr/sbin/named-checkzone -q $domain_name $domain_name.$$
    
    if [ $? -eq 0 ]; then
	
	v_echo "Loading zone $domain_name"

# If the zone file didn't already exists, we need to add the domain zone to named.conf
	
	if [ ! -f $domain_name ]; then

	    v_echo "Adding $domain_name to named.conf"

	    cat <<EOFNAMED >> /etc/named.conf
zone "$domain_name" {
        type master;
        file "$domain_name";
};

EOFNAMED

	fi

# Make the temp zone file live
	
	mv -f $domain_name.$$ $domain_name
		
    else
	
# Remove the bad zone file
	
	v_echo "Bad zone file for $domain_name"
	
	rm -f $domain_name.$$
	
    fi
    
done

if [ $rebuild_conf -ne 0 ]; then

    v_echo "Rebuilding named.conf file"

# Static stuff that will always be in the named.conf file

    cat <<EOFNAMED > /etc/named.conf

options {
	directory "$NAMED_ROOT";
        allow-transfer {
                127.0.0.1;
        };
	auth-nxdomain no;
        forward only;

        forwarders {
                127.0.0.1;
        };

};

zone "." {
	type master;
	file "default";
};

EOFNAMED

# Loop through the domains on the server
    
    for domain_name in `$MYSQL_STR -e "select distinct d.name from domains d, dns_rec r where r.did = d.id and d.soa is not null" | sed '1d'`; do
	
	cat <<EOFNAMED >> /etc/named.conf
zone "$domain_name" {
        type master;
        file "$domain_name";
};

EOFNAMED
	
    done
    
fi

# Restart named

v_echo "Restarting named"

$INITD/named restart &> /dev/null
