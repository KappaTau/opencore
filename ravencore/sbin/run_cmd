#!/usr/bin/perl
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

$RC_ROOT = ( $ENV{'RC_ROOT'} ? $ENV{'RC_ROOT'} : '/usr/local/ravencore' );

#

if( $ARGV[0] eq "rcsock" )
{
    chdir $RC_ROOT . '/var/lib';
    
    exec $RC_ROOT . '/sbin/rcsock';
}

# this file is called by shell scripts to run commands in $RC_ROOT/bin
# it's a tiny bit slower because we have to connect to the rc.sock, instead of
# just running the given command, but it makes all activity on the commands
# auditable by the socket daemon

unshift @INC, $RC_ROOT . '/var/lib';

require rcsock;
require perl_functions;

#

$db = new rcsock($RC_ROOT. '/var/rc.sock');

# build our $cmd off of everything given on the command line

foreach (@ARGV)
{
    $cmd .= $_ . ' ';
}

# passwd doesn't go to the run_cmd, it goes to the passwd command :)

if( $cmd eq "passwd " )
{

# turn off echo so the password won't show up on the screen

    system "stty -echo";

    print "Enter in a new password: ";

    $passwd = <STDIN>;
    chomp($passwd);

    print "\nRe-enter the password: ";
    
    $passwd_again = <STDIN>;
    chomp($passwd_again);

# turn echo back on

    system "stty echo";

    print "\n";

    &die_error("The passwords must match!") unless $passwd eq $passwd_again;

    &die_error("Your password must be at least 5 characters long.") unless length($passwd) > 4;

    &die_error("Your password must contain at least one digit.") unless $passwd =~ m/\d/;

    &die_error("Your password must contain at least one alphabetical character.") unless $passwd =~ m/[a-zA-Z]/;

    $db->change_passwd(&get_passwd, $passwd);

    print "Success!!\n";

    exit(0);

}

# run the command
# TODO: check $cmd here. the socket does this, but might as well add a layer
# of security here, too

# any out put of the command will be printed

print $db->run_cmd($cmd);

