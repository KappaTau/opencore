#!/usr/bin/perl
#
#                  RavenCore Hosting Control Panel
#                Copyright (C) 2005  Corey Henderson
#
#     This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#

BEGIN {
	$RC_ROOT = ( $ENV{'RC_ROOT'} ? $ENV{'RC_ROOT'} : '/usr/local/ravencore' );

	# add the ravencore lib directory to the search path for perl modules
	unshift @INC, $RC_ROOT . '/var/lib';
};

use RavenCore::Client;
use Data::Dumper;

if (0 == scalar @ARGV) {
	print "Please supply an argument.\n";
	exit;
}

my $cmd;

my $rc = new RavenCore::Client($RC_ROOT);

if ($rc->auth_system ne "1") {
	print "Unable to authenticate to RavenCore.\n";
	exit;
}

# build our $cmd off of everything given on the command line

foreach (@ARGV) {
	$cmd .= $_ . ' ';
}

#
chop $cmd;

# user-friendly wrapper for the "passwd" command

if ($cmd eq "passwd") {
	$| = 1;

	my $error;

# nested do/while loop, allowing the user to retype the password if they made a mistake, w/o having
# to re-run the script
	do {

		$error = 0;
		my $passwd = "";
		my $passwd_again = "";

		print "Enter in a new password: ";

		$passwd = &passwd_prompt;

		print "\n";

		# confirm password
		print "  Re-enter the password: ";

		$passwd_again = &passwd_prompt;

		print "\n";

		if ($passwd ne $passwd_again) {
			print "The passwords must match!\n\n";
			$error = 1;
		}

		if ($error == 0) {
			if (!$rc->passwd($rc->get_passwd, $passwd)) {
				map { print $rc->{errors}{$_}, "\n" } keys %{$rc->{errors}};
				$error = 1;
			}
		}

	} while( $error );

	print "Success!!\n";

	exit;

}

# run the command
# any output of the command will be printed

my $ret = $rc->run($cmd);

if ($ret) {
	print ( ref($ret) ? Dumper($ret) : $ret );
}

map { print $rc->{errors}{$_}, "\n" } keys %{$rc->{errors}};

# a password prompt

sub passwd_prompt {

	my $passwd;
	my $n = 0;

	my $_DEL = chr(127);
	my $_BS = chr(8);

	$| = 1;

	system "stty", '-echo', '-icanon', 'eol', "\001";

	while (my $c = getc) {
		last if $c eq "\n";

		if( $c ne $_DEL )
		{
			print "*";
		$passwd .= $c;
			$n++;
		}

		if ($c eq $_DEL and $n > 0) {
			print $_BS . " " . $_BS;
			chop $passwd;
			$n--;
		}

	}

	system "stty", 'echo', 'icanon', 'eol', '^@';

	return $passwd;

}

